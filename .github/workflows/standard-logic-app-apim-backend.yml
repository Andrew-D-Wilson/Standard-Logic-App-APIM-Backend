name: standard-logic-app-apim-backend

on:
  workflow_dispatch:
jobs:
  BuildLogicAppStandard:
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - uses: actions/checkout@main
      
      - name: Easy Zip Files
        uses: vimtor/action-zip@v1
        with:
          dest: ${{ github.run_id }}.zip
          files: ./Application/
      - uses: actions/upload-artifact@master
        with:
          name: build-artifact
          path: ${{ github.run_id }}.zip
            
  Deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [BuildLogicAppStandard] 
    steps:
    
       # Checkout code
     - uses: actions/checkout@main

     - uses: azure/login@v1
       with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
        enable-AzPSSession: true

      # Deploy Logic App Standard Bicep file
     - name: deploy
       id: ladeploy
       uses: azure/arm-deploy@v1
       with:
         subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
         resourceGroupName: ${{ secrets.AZURE_RG }}
         template: ./Bicep/Application/application.azuredeploy.bicep
         parameters: 'applicationPrefixName=awap1 applicationName=Application1'
         failOnStdErr: false
     
     - name: Get publish Profile
       id: laapp
       uses: azure/powershell@v1
       with:
         inlineScript: |
          $profile = Get-AzWebAppPublishingProfile -ResourceGroupName ${{ secrets.AZURE_RG }} -Name ${{ steps.ladeploy.outputs.applicationLogicAppName }}
          $profile = $profile.Replace("`r", "").Replace("`n", "")
          Write-Output "::set-output name=profile::$profile"
         azPSVersion: latest

     - uses: actions/download-artifact@master
       with:
        name: build-artifact
        path: build-art/

     - name: Deploy to Azure Logic App
       uses: Azure/functions-action@v1
       id: la
       with:
        app-name: ${{ steps.ladeploy.outputs.applicationLogicAppName }}
        package: build-art/${{ github.run_id }}.zip
        publish-profile: ${{steps.laapp.outputs.profile}}

      # Deploy Logic App Standard Secrets Bicep file
     - name: deployLgsSecrets
       id: laKeyVayltSecretsdeploy
       uses: azure/arm-deploy@v1
       with:
         subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
         resourceGroupName: ${{ secrets.AZURE_RG }}
         template: ./Bicep/Application/applicationSecrets.azuredeploy.bicep
         parameters: >
           applicationLogicAppName=${{ steps.ladeploy.outputs.applicationLogicAppName }} 
           keyVaultName=${{ steps.ladeploy.outputs.keyVaultName }} 
           workflows="[{\"workflowName\": \"Workflow1\",\"workflowTrigger\": \"When_a_HTTP_request_is_received\"},{\"workflowName\": \"Workflow2\",\"workflowTrigger\": \"When_a_HTTP_request_is_received\"}]"
         failOnStdErr: false

      # Deploy APIM Instance Bicep file
     - name: deployAPIMINstance
       id: apimInstancedeploy
       uses: azure/arm-deploy@v1
       with:
         subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
         resourceGroupName: ${{ secrets.AZURE_RG }}
         template: ./Bicep/API/apimInstance.azuredeploy.bicep
         parameters: >
           apiPrefixName=awapi
           apimPublisherEmail=${{ secrets.EMAIL }}
           apimPublisherName=AndrewWilson
         failOnStdErr: false

      # Deploy Bicep file - APIM API and Operations
     - name: deployAPIMAPI
       id: apimAPIDeploy
       uses: azure/arm-deploy@v1
       with:
         subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
         resourceGroupName: ${{ secrets.AZURE_RG }}
         template: ./Bicep/API/logicAppStandardApimAPI.azuredeploy.bicep
         parameters: >
           logicAppName=${{ steps.ladeploy.outputs.applicationLogicAppName }}
           apimInstanceName=${{ steps.apimInstancedeploy.outputs.apimInstanceName }}
           keyVaultName=${{ steps.ladeploy.outputs.keyVaultName }}
           apiName=lgsAPI
           apimAPIPath=/appapi
           apimAPIDisplayName=ApplicationAPI
           apimAPIOperations="[{\"name\":\"w1\",\"displayName\":\"Workflow1\",\"method\":\"GET\",\"path\":\"/test1/{customerId}\",\"lgWorkflowName\":\"Workflow1\",\"lgWorkflowTrigger\":\"When_a_HTTP_request_is_received\"},{\"name\":\"w2\",\"displayName\":\"Workflow2\",\"method\":\"GET\",\"path\":\"/test2/\",\"lgWorkflowName\":\"Workflow2\",\"lgWorkflowTrigger\":\"When_a_HTTP_request_is_received\"}]"
         failOnStdErr: false
